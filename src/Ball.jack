// Повыносить методы туда, где они будут логично смотреться, почистить код или что-то такое

class Ball {
	field int posX, posY, speedX, speedY;

	constructor Ball new(int startX, int startY, int velocityX, int velocityY) {
		let posX = startX;
        let posY = startY;
        let speedX = velocityX;
        let speedY = velocityY;
		do draw();
		return this;
	}

	// Освобожднеие памяти
	method void dispose() {
		 do Memory.deAlloc(this);
		 return;
	}
	
	// Стираем мяч
	method void erase() {
      do Screen.setColor(false);
      do Screen.drawCircle(posX, posY, 3);
      return;
   }

	// Рисуем мяч
	method void draw() {
		 do Screen.setColor(true);
		 do Screen.drawCircle(posX, posY, 3);
		 return;
	}

	// Движение мяча
	method void move() {
		do erase();

		if ((posX < 5) | (posX > 506)) { let speedX = -speedX; }
        if (posY < 5) { let speedY = -speedY; }

		let posX = posX + speedX;
        let posY = posY + speedY;

		do draw();

		return;
	}

	// перенести в BreakBricksGame
	// Проверка столкновения мяча с платформой
	method void checkPaddleCollision(Paddle p) {
		var int paddleX, paddleY;

		let paddleX = p.getX();
		let paddleY = p.getY();

		if ((posY > (paddleY - 2)) & (posY < (paddleY + 2)) & (posX > (paddleX - 2)) & (posX < (paddleX + 25))) {
			let speedY = -speedY;
		}				
		return;
	}

	// перенести в BreakBricksGame
	// Проверка столкновения мяча с блоком
	 method void checkBrickCollision(Array bricks, int rowsCount, int bricksInRowCount, Counter counter) {
        var int i, j;
        var Brick brick;
        var int brickX, brickY;
		var int nextPosX, nextPosY;

		let j = 0;
		while (j < rowsCount) {
			let i = 0;
			while (i < bricksInRowCount) {
				let brick = bricks[i + (j * bricksInRowCount)];

				if (~(brick = null)) {
					let brickX = brick.getX();
					let brickY = brick.getY();

					let nextPosX = posX + speedX;
                	let nextPosY = posY + speedY;
						
					if (((nextPosY + 2) > brickY) & (nextPosY < (brickY + 2)) &
                    ((nextPosX + 2) > brickX) & (nextPosX < (brickX + 25))) {
						let speedY = -speedY;
						do brick.erase();
						do brick.dispose();
						do counter.add();
						let bricks[i + (j * bricksInRowCount)] = null;
					}
				}
				let i = i + 1;
			}
			let j = j + 1;
		}
        return;
    }

	method int getX() { return posX; }
    method int getY() { return posY; }
}
